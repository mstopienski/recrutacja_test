@using DragAndDrop.SampleProject.Model


<div class="pageContainer">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>



@code {

    [Parameter]
    public List<UserModel> Users { get; set; }

    [Parameter]
    public List<ContainerBase> Containers { get; set; }

    [Parameter]
    public ContainerBase HomePanel { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public EventCallback<UserModel> OnStatusUpdated { get; set; }

    public List<EventModel> EventMessages { get; set; } = new();

    public List<UserModel> Payload { get; set; } = new();

    public async Task UpdateUserAsync(string newStatus)
    {
        var users = Users.Where(x => Payload.Any(p => p.Id == x.Id)).ToList();
        if (users.Any())
        {
            foreach (var user in users)
            {
                HandleEventMessage(user, newStatus);
                user.Identifier = newStatus;
                await OnStatusUpdated.InvokeAsync(user);

            }

            Payload.Clear();
            StateHasChanged();
        }
    }

    public void HandleEventMessage(UserModel usermodel, string newStatus)
    {
        if (usermodel.Identifier.Equals(newStatus))
        {
            return;
        }

        if (newStatus == HomePanel.Id)
        {     
            var container = Containers.FirstOrDefault(x => x.Id == usermodel.Identifier);           
            EventMessages.Insert(0,
            new EventModel()
                {
                    Message = $"Użytkownik {usermodel.FirstName} {usermodel.LastName} został usunięty z Grupy {container.Name}",
                    ContainerEventGraphicIndicator = container.Icon
                });                     
        }
        else
        {
            var container = Containers.FirstOrDefault(x => x.Id == newStatus);
            EventMessages.Insert(0,
            new EventModel()
                {
                    Message = $"Użytkownik {usermodel.FirstName} {usermodel.LastName} został przeniesiony do Grupy {container.Name}",
                    ContainerEventGraphicIndicator = container.Icon
                });
        }
    }
}
