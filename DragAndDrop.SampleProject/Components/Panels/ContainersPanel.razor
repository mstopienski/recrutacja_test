@inject IJSRuntime JSRuntime;
@using DragAndDrop.SampleProject.Components.Templates
@using DragAndDrop.SampleProject.Model
@using DragAndDrop.SampleProject.Services
@inherits _ContainerTemplate

<div class="panel" style="width:60%">
    <div style="height:30px;width:100%;display:flex">
        @foreach (var item in PanelMain.Containers)
        {
            string activeIndicator = activeGroup == item.Id ? "font-weight:bold" : "";
            <button class="bButton" style="@activeIndicator" id="@item.Id"
            @onclick="()=>SwitchTab(item.Id)"
                @ondrop="()=>HandleDrop(item.Id)"              
                    ondragover="event.preventDefault();"
                    @ondragenter="()=>HandleDragIn(item.Id)"
                    @ondragleave="HandleDragLeave">

                <div style="display:flex;line-height:1;justify-content:center;height:100%;width:100%;padding:5px;position: relative;">
                    <span class="material-symbols-outlined" style="font-size:14px;margin-right:5px">
                        @item.Icon
                    </span>
                    <div>
                        Grupa @item.Name
                    </div>
                </div>
                </button>
        }    
    </div>
    @foreach (var item in PanelMain.Containers)
    {
        bool isVisible = activeGroup == item.Id;
        <Container IsVisible="@isVisible" ContainerModel="@item" />
    }
</div>


@code {
    private string activeGroup; 

    [CascadingParameter]
    PanelMain PanelMain { get; set; }

    protected override void OnInitialized()
    {
        activeGroup = PanelMain.Containers.First().Id;
    }

    private async Task SwitchTab(string tabIndex)
    {
        await JSRuntime.InvokeVoidAsync("OnButtonHoverIn", tabIndex);
        this.activeGroup = tabIndex;
    }

   

    public void HandleDragIn(string tabIndex)
    {
        JSRuntime.InvokeVoidAsync("OnButtonHoverIn", tabIndex);
        base.HandleDragEnter();
        this.activeGroup = tabIndex;
    
    }
}
